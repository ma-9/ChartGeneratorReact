{"version":3,"sources":["Components/ChartComponent/Circle.js","Components/ChartComponent/TextLabel.js","Components/ChartComponent/Line.js","Components/Chart/index.js","App.js","index.js"],"names":["Circle","this","props","date","r","cy","FullDate","DayDistance","oldDate","DaTe","getDate","MoNtH","getMonth","YeAr","getFullYear","storedDate","Date","diffTime","Math","abs","getTime","x","floor","getHours","getMinutes","getSeconds","cx","data-value","Component","TextLabel","months","y","getYear","toString","substr","x1","x2","y1","y2","Charts","state","push","sort","a","b","FirstDay","LastDay","length","ceil","dDistance","dDD","lineArray","className","id","map","index","key","axis","Line","App","loading","handleDateAndTime","e","preventDefault","newValue","target","value","setState","open","handleClose","event","reason","Box","component","Typography","variant","onSubmit","TextField","type","label","InputLabelProps","shrink","name","required","Button","Snackbar","autoHideDuration","onClose","Alert","severity","Skeleton","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4e93af7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Circle extends Component {\r\n  render() {\r\n    const months = [\r\n      'Jan',\r\n      'Feb',\r\n      'Mar',\r\n      'Apr',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'Aug',\r\n      'Sep',\r\n      'Oct',\r\n      'Nov',\r\n      'Dec'\r\n    ];\r\n\r\n    const { date, r, cy, FullDate, DayDistance } = this.props;\r\n\r\n    var oldDate = FullDate[0];\r\n\r\n    var DaTe = oldDate.getDate();\r\n    var MoNtH = months[oldDate.getMonth()];\r\n    var YeAr = oldDate.getFullYear();\r\n\r\n    var storedDate = new Date(`${MoNtH} ${DaTe}, ${YeAr}`);\r\n\r\n    let diffTime = Math.abs(date.getTime() - storedDate.getTime());\r\n    let diffDay = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    // Getting Current Date & Time\r\n    let h = date.getHours() * 3600;\r\n    let m = date.getMinutes() * 60;\r\n    let s = date.getSeconds();\r\n\r\n    // Lets Make Calculation to create points\r\n    let totalSecondInToday = h + m + s;\r\n\r\n    let secondtoCurrentDay = totalSecondInToday / 86400;\r\n\r\n    let totalConversion = diffDay + secondtoCurrentDay;\r\n\r\n    let x = DayDistance * totalConversion;\r\n\r\n    return <circle cx={x} cy={cy} data-value={date} r={r}></circle>;\r\n  }\r\n}\r\n\r\nexport default Circle;\r\n","import React, { Component } from 'react';\r\n\r\nclass TextLabel extends Component {\r\n  render() {\r\n    const months = [\r\n      'Jan',\r\n      'Feb',\r\n      'Mar',\r\n      'Apr',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'Aug',\r\n      'Sep',\r\n      'Oct',\r\n      'Nov',\r\n      'Dec'\r\n    ];\r\n    const { DayDistance, FullDate, date, y } = this.props;\r\n\r\n    var oldDate = FullDate[0];\r\n\r\n    var DaTe = oldDate.getDate();\r\n    var MoNtH = months[oldDate.getMonth()];\r\n    var YeAr = oldDate.getFullYear();\r\n\r\n    var storedDate = new Date(`${MoNtH} ${DaTe}, ${YeAr} 00:00:01`);\r\n\r\n    let diffTime = Math.abs(date.getTime() - storedDate.getTime());\r\n    let diffDay = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    let x = diffDay * DayDistance;\r\n\r\n    return (\r\n      <text x={x} y={y}>\r\n        {date.getDate() +\r\n          ' ' +\r\n          months[date.getMonth()] +\r\n          ' ' +\r\n          date\r\n            .getYear()\r\n            .toString()\r\n            .substr(-2)}\r\n      </text>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextLabel;\r\n","import React, { Component } from 'react';\r\n\r\nclass Circle extends Component {\r\n  render() {\r\n    let { x1, x2, y1, y2 } = this.props;\r\n\r\n    return <line x1={x1} x2={x2} y1={y1} y2={y2}></line>;\r\n  }\r\n}\r\n\r\nexport default Circle;\r\n","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport Circle from '../ChartComponent/Circle';\r\nimport TextLabel from '../ChartComponent/TextLabel';\r\nimport Line from '../ChartComponent/Line';\r\nclass Charts extends Component {\r\n  state = {\r\n    FullDate: []\r\n  };\r\n\r\n  render() {\r\n    const { date } = this.props;\r\n\r\n    this.state.FullDate.push(new Date(date));\r\n\r\n    this.state.FullDate.sort((a, b) => a - b);\r\n\r\n    let FirstDay = this.state.FullDate[0];\r\n    let LastDay = this.state.FullDate[this.state.FullDate.length - 1];\r\n\r\n    let diffTime = Math.abs(LastDay.getTime() - FirstDay.getTime());\r\n    let Difference_In_Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    let lineWidth = 1000;\r\n\r\n    let Differ = Difference_In_Days + 1;\r\n\r\n    let DayDistance = lineWidth / Differ;\r\n\r\n    const dDistance = DayDistance;\r\n    let dDD = 0;\r\n\r\n    let lineArray = [];\r\n    while (dDD <= lineWidth) {\r\n      lineArray.push(dDD);\r\n      dDD = dDD + dDistance;\r\n    }\r\n    return (\r\n      <div>\r\n        <svg className='graph'>\r\n          <g className='grid y-grid' id='yGrid'>\r\n            <line x1='0' x2={lineWidth} y1='70' y2='70'></line>\r\n          </g>\r\n          <g className='labels x-labels'>\r\n            {this.state.FullDate.map((date, index) => (\r\n              <TextLabel\r\n                key={index}\r\n                FullDate={this.state.FullDate}\r\n                index={index}\r\n                date={date}\r\n                FirstDay={FirstDay}\r\n                DayDistance={DayDistance}\r\n                y='50'\r\n              />\r\n            ))}\r\n          </g>\r\n          <g className='data'>\r\n            {this.state.FullDate.map((date, index) => (\r\n              <Circle\r\n                key={index}\r\n                cy='70'\r\n                FullDate={this.state.FullDate}\r\n                index={index}\r\n                FirstDay={FirstDay}\r\n                date={date}\r\n                DayDistance={DayDistance}\r\n                r='5'\r\n              />\r\n            ))}\r\n          </g>\r\n\r\n          {\r\n            //Lines at end of the day}\r\n          }\r\n          <g className='lines'>\r\n            {lineArray.map((axis, index) => (\r\n              <Line key={index} x1={axis} x2={axis} y1='65' y2='75' />\r\n            ))}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Charts;\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  Snackbar,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { Skeleton, Alert } from '@material-ui/lab';\r\nimport './App.css';\r\nimport ChartMaker from './Components/Chart';\r\nclass App extends Component {\r\n  state = {\r\n    date: '',\r\n    loading: false\r\n  };\r\n\r\n  handleDateAndTime = (e) => {\r\n    e.preventDefault();\r\n    var newValue = e.target.Date.value;\r\n    this.setState({\r\n      date: newValue,\r\n      loading: true,\r\n      open: true\r\n    });\r\n    e.target.Date.value = '';\r\n  };\r\n\r\n  handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      open: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box component='div' className='homeDiv'>\r\n        <Typography variant='h2'>Enter Date & Time</Typography>\r\n        <br />\r\n        <form onSubmit={this.handleDateAndTime}>\r\n          <TextField\r\n            type='datetime-local'\r\n            label='Enter Date & Time'\r\n            InputLabelProps={{ shrink: true }}\r\n            name='Date'\r\n            required\r\n          ></TextField>\r\n          <Button variant='contained' type='submit'>\r\n            Add Date\r\n          </Button>\r\n        </form>\r\n\r\n        <div className='chart'>\r\n          {this.state.loading ? (\r\n            <Fragment>\r\n              <ChartMaker date={this.state.date} />\r\n              <Snackbar\r\n                open={this.state.open}\r\n                autoHideDuration='3000'\r\n                onClose={this.handleClose}\r\n              >\r\n                <Alert severity='success' onClose={this.handleClose}>\r\n                  Date Added Successfully\r\n                </Alert>\r\n              </Snackbar>\r\n            </Fragment>\r\n          ) : (\r\n            <Skeleton />\r\n          )}\r\n        </div>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}