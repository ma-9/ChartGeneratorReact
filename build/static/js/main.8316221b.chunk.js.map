{"version":3,"sources":["Components/Circle.js","Components/TextLabel.js","Components/Line.js","App.js","index.js"],"names":["Circle","this","props","date","r","cy","FullDate","DayDistance","oldDate","DaTe","getDate","MoNtH","getMonth","YeAr","getFullYear","storedDate","Date","diffTime","Math","abs","getTime","x","floor","getHours","getMinutes","getSeconds","cx","data-value","Component","TextLabel","months","y","diffDay","console","log","getYear","toString","substr","x1","x2","y1","y2","App","sort","a","b","FirstDay","LastDay","length","ceil","dDistance","dDD","lineArray","push","className","id","map","index","key","axis","Line","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8316221b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Circle extends Component {\r\n  render() {\r\n    const months = [\r\n      'Jan',\r\n      'Feb',\r\n      'Mar',\r\n      'Apr',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'Aug',\r\n      'Sep',\r\n      'Oct',\r\n      'Nov',\r\n      'Dec'\r\n    ];\r\n\r\n    const { date, r, cy, FullDate, DayDistance } = this.props;\r\n\r\n    var oldDate = FullDate[0];\r\n\r\n    var DaTe = oldDate.getDate();\r\n    var MoNtH = months[oldDate.getMonth()];\r\n    var YeAr = oldDate.getFullYear();\r\n\r\n    var storedDate = new Date(`${MoNtH} ${DaTe}, ${YeAr}`);\r\n\r\n    let diffTime = Math.abs(date.getTime() - storedDate.getTime());\r\n    let diffDay = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    // Getting Current Date & Time\r\n    let h = date.getHours() * 3600;\r\n    let m = date.getMinutes() * 60;\r\n    let s = date.getSeconds();\r\n\r\n    // Lets Make Calculation to create points\r\n    let totalSecondInToday = h + m + s;\r\n\r\n    let secondtoCurrentDay = totalSecondInToday / 86400;\r\n\r\n    let totalConversion = diffDay + secondtoCurrentDay;\r\n\r\n    let x = DayDistance * totalConversion;\r\n\r\n    // console.log('CIRCLE', diffDay);\r\n\r\n    return <circle cx={x} cy={cy} data-value={date} r={r}></circle>;\r\n  }\r\n}\r\n\r\nexport default Circle;\r\n\r\n// let tillTodaySecond = RoundedFigureOfCurrentDay * 86400;\r\n\r\n// let secondToTilDays = tillTodaySecond / 86400;\r\n\r\n// if (CurrentDay === 0) {\r\n//   CurrentDay = 1;\r\n// }\r\n\r\n// if (index !== FullDate[0]) {\r\n//   if (date.getDate() === FullDate[index].getDate()) {\r\n//     diffTime = Math.abs(date.getTime() - FirstDay.getTime());\r\n//     diffDay = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n//   } else {\r\n//     diffTime = Math.abs(date.getTime() - FirstDay.getTime());\r\n//     diffDay = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n//   }\r\n// }\r\n\r\n// var diffDay;\r\n// var diffTime;\r\n\r\n// let StartDay = FirstDay.getDate();\r\n// let today = date.getDate();\r\n// let diffTime = Math.abs(date - FirstDay);\r\n// let diffDay = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n// let CurrentDay = today - StartDay;\r\n","import React, { Component } from 'react';\r\n\r\nclass TextLabel extends Component {\r\n  render() {\r\n    const months = [\r\n      'Jan',\r\n      'Feb',\r\n      'Mar',\r\n      'Apr',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'Aug',\r\n      'Sep',\r\n      'Oct',\r\n      'Nov',\r\n      'Dec'\r\n    ];\r\n    const { DayDistance, FullDate, date, y } = this.props;\r\n\r\n    var oldDate = FullDate[0];\r\n\r\n    var DaTe = oldDate.getDate();\r\n    var MoNtH = months[oldDate.getMonth()];\r\n    var YeAr = oldDate.getFullYear();\r\n\r\n    var storedDate = new Date(`${MoNtH} ${DaTe}, ${YeAr} 00:00:01`);\r\n\r\n    let diffTime = Math.abs(date.getTime() - storedDate.getTime());\r\n    let diffDay = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    console.log('TEXTLABEL', diffDay);\r\n\r\n    let x = diffDay * DayDistance;\r\n\r\n    return (\r\n      <text x={x} y={y}>\r\n        {date.getDate() +\r\n          ' ' +\r\n          months[date.getMonth()] +\r\n          ' ' +\r\n          date\r\n            .getYear()\r\n            .toString()\r\n            .substr(-2)}\r\n      </text>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextLabel;\r\n\r\n// var Difference_In_Time = date.getTime() - FirstDay.getTime();\r\n\r\n// var CurrentDay = Difference_In_Time / (1000 * 3600 * 24);\r\n// let RoundedFigureOfCurrentDay = Math.ceil(CurrentDay);\r\n\r\n// var diffDay;\r\n// var diffTime;\r\n\r\n// let normalDayDistance = DayDistance;\r\n\r\n// if (index !== FullDate[0]) {\r\n//   if (date.getDate() === FullDate[index].getDate()) {\r\n//     diffTime = Math.abs(storedDate.getTime() - FirstDay.getTime());\r\n//     diffDay = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n//   } else {\r\n//     diffTime = Math.abs(storedDate.getTime() - FirstDay.getTime());\r\n//     diffDay = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n//   }\r\n// }\r\n","import React, { Component } from 'react';\r\n\r\nclass Circle extends Component {\r\n  render() {\r\n    let { x1, x2, y1, y2 } = this.props;\r\n\r\n    return <line x1={x1} x2={x2} y1={y1} y2={y2}></line>;\r\n  }\r\n}\r\n\r\nexport default Circle;\r\n","// Range of 0px - 1000px\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Circle from './Components/Circle';\nimport TextLabel from './Components/TextLabel';\nimport Line from './Components/Line';\nclass App extends Component {\n  render() {\n    var FullDate = [\n      new Date('Thu Jan 16 2020 21:21:17 GMT+0530 (India Standard Time)'),\n      new Date('Sat Jan 11 2020 12:21:17 GMT+0530 (India Standard Time)'),\n      new Date('Thu Jan 16 2020 14:21:17 GMT+0530 (India Standard Time)'),\n      new Date('Sun Jan 12 2020 15:21:17 GMT+0530 (India Standard Time)'),\n      new Date('Thu Jan 16 2020 17:21:17 GMT+0530 (India Standard Time)'),\n      new Date('Thu Jan 16 2020 21:21:17 GMT+0530 (India Standard Time)')\n    ];\n\n    // for (let i = 0; i < FullDate.length; i++) {\n    //   if (\n    //     FullDate[i].getHours() === 23 &&\n    //     FullDate[i].getMinutes() === 59 &&\n    //     FullDate[i].getSeconds() === 59\n    //   ) {\n    //     let currentDate = FullDate[i].getDate();\n\n    //     FullDate[i].setDate(currentDate + 1);\n    //     FullDate[i].setHours('00');\n    //     FullDate[i].setMinutes('00');\n    //     FullDate[i].setSeconds('01');\n    //   }\n    // }\n\n    FullDate.sort((a, b) => a - b);\n\n    console.log(FullDate);\n\n    let FirstDay = FullDate[0];\n    let LastDay = FullDate[FullDate.length - 1];\n\n    let diffTime = Math.abs(LastDay.getTime() - FirstDay.getTime());\n    let Difference_In_Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    let lineWidth = 1000;\n\n    // // We have to increment 1 to Difference of Days so we can see last day\n    let Differ = Difference_In_Days + 1;\n\n    let DayDistance = lineWidth / Differ;\n\n    // const dDistance = lineWidth / Difference_In_Days;\n    const dDistance = DayDistance;\n    let dDD = 0;\n\n    // This Array Makes Equal Distance Between The Verticle Lines\n    let lineArray = [];\n    while (dDD <= lineWidth) {\n      lineArray.push(dDD);\n      dDD = dDD + dDistance;\n    }\n\n    // console.log('APP', Differ);\n\n    // for(let i =0 ; i<=lineWidth;i++){\n    //   let value;\n\n    //   value = lineWidth/Difference_In_Days\n    // }\n\n    return (\n      <div>\n        <svg className='graph'>\n          <g className='grid y-grid' id='yGrid'>\n            <line x1='0' x2={lineWidth} y1='370' y2='370'></line>\n          </g>\n\n          {\n            // Text Label Component\n          }\n          <g className='labels x-labels'>\n            {FullDate.map((date, index) => (\n              <TextLabel\n                key={index}\n                FullDate={FullDate}\n                index={index}\n                date={date}\n                FirstDay={FirstDay}\n                DayDistance={DayDistance}\n                y='400'\n              />\n            ))}\n          </g>\n\n          {\n            // Data Component\n          }\n          <g className='data'>\n            {FullDate.map((date, index) => (\n              <Circle\n                key={index}\n                cy='370'\n                FullDate={FullDate}\n                index={index}\n                FirstDay={FirstDay}\n                date={date}\n                DayDistance={DayDistance}\n                r='5'\n              />\n            ))}\n          </g>\n\n          {\n            //Lines at end of the day}\n          }\n          <g className='lines'>\n            {lineArray.map((axis, index) => (\n              <Line key={index} x1={axis} x2={axis} y1='365' y2='375' />\n            ))}\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// Data For Example\n// new Date('Fri Jan 03 2020 11:45:20 GMT+0530 (India Standard Time)'),\n//       new Date('Mon Jan 06 2020 10:21:40 GMT+0530 (India Standard Time)'),\n//       new Date('Wed Jan 08 2020 15:21:17 GMT+0530 (India Standard Time)'),\n//       new Date('Thu Jan 09 2020 04:21:17 GMT+0530 (India Standard Time)'),\n//       new Date('Thu Jan 16 2020 21:21:17 GMT+0530 (India Standard Time)'),\n//       new Date('Thu Jan 16 2020 12:21:17 GMT+0530 (India Standard Time)'),\n//       new Date('Thu Jan 13 2020 2:21:17 GMT+0530 (India Standard Time)')\n\n//  // To calculate the time difference of two dates\n//  var Difference_In_Time = Math.abs(LastDay.getTime() - FirstDay.getTime());\n\n//  // To calculate the no. of days between two dates\n//  var Difference_In_Days = Math.round(\n//    Difference_In_Time / (1000 * 3600 * 24)\n//  );\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}